" Automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %
autocmd BufEnter NERD_tree* :LeadingSpaceDisable

" Better copy & paste
" Press F2 to switch between Normal mode and Paste mode.
" At the bottom, the VIM status bar will show ``-- INSERT (paste) --``.
" Press p or ctrl-shift-v to paste.
set pastetoggle=<F2>
set clipboard=unnamed

" Mouse, curssor and backspace
set mouse=a  " on OSX press ALT and click
set bs=2     " make backspace behave like normal again
set cursorcolumn
set cursorline
set listchars=tab:·\ ,trail:·
set listchars=eol:¬,tab:\ \
" set listchars=eol:├,tab:\ \
" set listchars=eol:§,tab:\ \
set list

highlight SpecialKey ctermfg=166 guifg=#d65d0e
"Cursor mode settings:
"  1 -> blinking block
"  2 -> solid block
"  3 -> blinking underscore
"  4 -> solid underscore
"  5 -> blinking vertical bar
"  6 -> solid vertical bar
let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
let &t_EI.="\e[1 q" "EI = NORMAL mode (ELSE)

" easier formatting of paragraphs
vmap Q gq
nmap Q gqap

" Rebind <Leader> key to use comma ',' instead of colon ':'
let mapleader = ","

" Bind nohl
" Removes highlight of your last search
" ``<C>`` stands for ``CTRL`` and therefore ``<C-n>`` stands for ``CTRL+n``
noremap <C-n> :nohl<CR>
vnoremap <C-n> :nohl<CR>kk
" Quick save command
noremap <C-Z> :update<CR>
vnoremap <C-Z> <C-C>:update<CR>
inoremap <C-Z> <C-O>:update<CR>

" Quick undo command
noremap <C-X> :u<CR>
vnoremap <C-X> <C-C>:u<CR>
inoremap <C-X> <C-O>:u<CR>

" Quick quit command
noremap <Leader>e :quit<CR>     " quit current window
noremap <Leader>E :qa!<CR>      " quit all windows

" Bind Ctrl+<movement> keys to move around the windows when using split mode,
" instead of using Ctrl+w + <movement>
map <C-j> <c-w>j    " move to next window below
map <C-k> <c-w>k    " move to next window above
map <C-l> <c-w>l    " move to next window on the right
map <C-h> <c-w>h    " move to next window on the left

" Easier moving between tabs
map <Leader>n <esc>:tabprevious<CR>
map <Leader>m <esc>:tabnext<CR>

" Map sort function to a key
vnoremap <Leader>s :sort<CR>

" Easier moving of code blocks
" Try to go into visual mode (v), thenselect several lines of code here and
" then press ``>`` several times.
vnoremap < <gv  " better indentation
vnoremap > >gv  " better indentation

" Enable syntax highlighting
" You need to reload this file for the change to apply
filetype on
filetype plugin indent on
syntax on
let g:vim_json_conceal = 0

" Enable XML syntax
" let g:xml_syntax_folding=1
" au FileType xml setlocal foldmethod=syntax

" Showing line numbers and length
set number relativenumber  " show absolute & relative line number
:augroup numbertoggle
:  autocmd!
:  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
:  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
:augroup END
set tw=79           " width of document (used by gd) not to exceed 79 chars
set nowrap          " don't automatically wrap on load
set fo-=t           " don't automatically wrap text when typing
set colorcolumn=80
highlight ColorColumn ctermbg=233

" Useful settings
set history=700
set undolevels=700

" Default indentation with 2 spaces
set tabstop=2
set softtabstop=2
set shiftwidth=2
set shiftround
set expandtab

" Indentation of the specific file types
autocmd Filetype python setlocal ts=4 sw=4 sts=4 expandtab shiftround
autocmd FileType gitconfig set noexpandtab

" Make search case insensitive
set hlsearch
set incsearch
set ignorecase
set smartcase

" Disable backup and swap files - they trigger too many events
" for file system watchers
set nobackup
set nowritebackup
set noswapfile

" ------------------------------------------
" PLUGINS INSTALLATION using Vim-Plug
" https://github.com/junegunn/vim-plug
" ------------------------------------------
" Install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

call plug#begin('~/.vim/plugged')
" Themes and Enhancement
" --------------------------------
Plug 'https://github.com/vim-airline/vim-airline'
Plug 'https://github.com/lifepillar/vim-solarized8'
Plug 'https://github.com/preservim/nerdtree'
Plug 'https://github.com/tpope/vim-repeat'
Plug 'https://github.com/majutsushi/tagbar'
Plug 'https://github.com/ervandew/supertab'
" Plug 'https://github.com/junegunn/fzf.vim'
"
" Formating
" --------------------------------
Plug 'https://github.com/Yggdroot/indentLine'
Plug 'https://github.com/jiangmiao/auto-pairs'
Plug 'https://github.com/tpope/vim-surround'
Plug 'https://github.com/preservim/nerdcommenter'

" Git 
" --------------------------------
Plug 'https://github.com/Xuyuanp/nerdtree-git-plugin'
Plug 'https://github.com/tpope/vim-fugitive'
Plug 'https://github.com/airblade/vim-gitgutter'

" Linting
" --------------------------------
Plug 'https://github.com/dense-analysis/ale'
" Plug 'https://github.com/vim-syntastic/syntastic'

" IDE 
" --------------------------------
Plug 'https://github.com/davidhalter/jedi-vim'
Plug 'https://github.com/pseewald/vim-anyfold'

" Ruby Tools 
" --------------------------------
Plug 'https://github.com/tpope/vim-bundler'
Plug 'https://github.com/vim-ruby/vim-ruby'
Plug 'https://github.com/tpope/vim-endwise'

" Miscellaneous Tools 
" --------------------------------
Plug 'https://github.com/vim-scripts/openssl.vim'
call plug#end()

" ------------------------------------------
" PLUGINS SETUP
" ------------------------------------------
" vim-airline | Lean & mean status/tabline for vim that's light as air.
" https://github.com/vim-airline/vim-airline
let g:airline_powerline_fonts = 1

" MUST be inserted BEFORE the colorscheme command
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
"
" Solarized color scheme
" https://github.com/lifepillar/vim-solarized8
set background=dark
" set background=light
autocmd vimenter * ++nested colorscheme solarized8
let g:solarized_termtrans = 0
let g:solarized_extra_hi_groups = 1

" NERDTree System File Explorer
noremap <Leader>t :NERDTreeToggle<CR> " Toggle NERDTree

" NERD Commenter
" Create default mappings
let g:NERDCreateDefaultMappings = 1

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 0

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
let g:NERDAltDelims_python = 1

" Custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1

" vim-surround usages
" In VIM normal mode:
" yss<surround-char>: surround at current line
" S<surround-char>  : surround selected text (Visual mode)
" ds<surround-char> : remove surround char (cursor inside surround quote)
" cs<current-surround-char><new-surround-char>: change new surround char " (cursor inside surround quote)

" IndentLine
" git clone https://github.com/Yggdroot/indentLine.git ~/.vim/pack/plugins/start/indentLint
" vim -u NONE -c "helptags  ~/.vim/pack/vendor/start/indentLine/doc" -c "q"
let g:indentLine_setColors = 1
let g:indentLine_color_term = 239
" let g:indentLine_char = '┊'
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
" let g:indentLine_char_list = ['┊', '┆', '¦', '|']
let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_leadingSpaceChar = '·'
let g:indentLine_concealcursor = 'inc'
let g:indentLine_conceallevel = 2
" let g:indentLine_bufNameExclude = ['_.', 'NERD_tree.']
" let g:indentLine_fileTypeExclude = ["nerdtree"]

" NerdTree Git plugin showing git status flag
let g:NERDTreeGitStatusIndicatorMapCustom = {
                \ 'Modified'  :'✹',
                \ 'Staged'    :'✚',
                \ 'Untracked' :'✭',
                \ 'Renamed'   :'➜',
                \ 'Unmerged'  :'═',
                \ 'Deleted'   :'✖',
                \ 'Dirty'     :'✗',
                \ 'Ignored'   :'☒',
                \ 'Clean'     :'✔︎',
                \ 'Unknown'   :'?',
                \ }

" Synstactic checked plugin
" https://github.com/vim-syntastic/syntastic
" git clone --depth=1 https://github.com/vim-syntastic/syntastic.git \
"   ~/.vim/pack/plugins/start/syntastic
" vim -u NONE "helptags ~/.vim/pack/plugins/start/syntastic/doc" -c q
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_python_checkers = ['python', 'pycodestyle', 'pyflakes', 'pylint']

" vim-anyfold
" https://github.com/pseewald/vim-anyfold
autocmd Filetype * AnyFoldActivate " activate for all filetypes
" or
" autocmd Filetype <your-filetype> AnyFoldActivate " activate for a specific filetype
set foldlevel=0  " close all folds (99: Open all folds)
" noremap zM fM

" Settings for jedi-vim to have autocompletion mode for python
let g:jedi#usages_command = "<leader>z"
let g:jedi#popup_on_dot = 1
let g:jedi#popup_select_first = 0
let g:jedi#use_splits_not_buffers = "left"
let g:jedi#show_call_signatures = "1"

map <Leader>b Oimport ipdb; ipdb.set_trace() # BREAKPOINT<C-c>

" Password Safe and edit openssl encrypted files
" https://www.vim.org/scripts/script.php?script_id=2012
" https://github.com/vim-scripts/openssl.vim
" File extentions: .des3 .aes .bf .bfa .idea .cast .rc2 .rc4 .rc5
let g:openssl_backup = 1 " Make a backup of an encrypted file before writing changes

" Settings for fzf (Full path fuzzy file finder for terminal and VIM)
" Alternative CTRL-P https://github.com/ctrlpvim/ctrlp.vim.git ctrlp.vim
" https://github.com/junegunn/fzf
set rtp+=/opt/homebrew/opt/fzf
nmap <C-P> :FZF<CR>

" Generating Vim help files
" Put these lines at the very end of your vimrc file.
" Load all plugins now.
" Plugins need to be added to runtimepath before helptags can be generated.
packloadall
" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL
